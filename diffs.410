(cd examples/ppx_curried_constr && ./MAKE-DIFF /home/chet/Hack/Ocaml/GENERIC/4.10.0/.opam-switch/sources/ocaml-base-compiler.4.10.0)
--- /home/chet/Hack/Ocaml/GENERIC/4.10.0/.opam-switch/sources/ocaml-base-compiler.4.10.0/typing/typecore.ml	2020-02-21 05:50:54.000000000 -0800
+++ my_typecore.ml	2020-10-14 21:00:52.069059689 -0700
@@ -13,6 +13,8 @@
 (*                                                                        *)
 (**************************************************************************)
 
+[@@@warning "-27-32"]
+
 (* Typechecking for the core language *)
 
 open Misc
@@ -111,6 +113,7 @@
   | Letop_type_clash of string * Ctype.Unification_trace.t
   | Andop_type_clash of string * Ctype.Unification_trace.t
   | Bindings_type_clash of Ctype.Unification_trace.t
+  | Other of string
 
 exception Error of Location.t * Env.t * error
 exception Error_forward of Location.error
@@ -2491,6 +2494,53 @@
   | Pexp_function caselist ->
       type_function ?in_function
         loc sexp.pexp_attributes env ty_expected_explained Nolabel caselist
+
+(* ppx_curried_constr begin *)
+        
+   (* ((!F) 1) 2 3  == !F 1 2 3
+      
+      We here to try contract applications as possible...
+   *)
+   | Pexp_apply ( { pexp_desc = Pexp_apply(x,xs);
+                    pexp_attributes = [] }, ys ) ->
+ 
+       type_expect_ ?in_function env 
+         { sexp with pexp_desc = Pexp_apply (x, xs @ ys) }
+         (mk_expected ty_expected)
+ 
+   | Pexp_apply({ pexp_desc = Pexp_ident {txt=Longident.Lident "!"; loc=loc'} }, 
+                (Nolabel, ({ pexp_desc = Pexp_construct (lid, None) } as con)) :: xs) ->
+       (* ! C a b *)
+       type_construct_curried ?in_function env loc ty_expected 
+         sexp.pexp_attributes
+         con loc' xs
+ 
+   | Pexp_apply({ pexp_desc = Pexp_ident {txt=Longident.Lident "!"; loc=loc'} }, 
+                (Nolabel, ({ pexp_desc = Pexp_variant (l, None) } as e)) :: xs) ->
+       (* ! `F a b *)
+       let open Ast_helper in
+       begin match xs with
+       | (Nolabel,x)::xs -> (* (`A..) a b => (`A a) b *)
+           let sexp = Exp.apply ~loc { e with pexp_desc = Pexp_variant (l, Some x) } xs in
+           type_expect_ ?in_function env sexp (mk_expected ty_expected)
+       | [] -> (* (`A..) => fun x -> `A x *)
+           let pat = Pat.var ~loc:loc' {txt="x"; loc=loc'} in
+           let var = Exp.ident ~loc:loc' {txt=Longident.Lident "x"; loc=loc'} in
+           let sexp = Ast_helper.Exp.fun_ ~loc Nolabel None pat 
+             { e with pexp_desc = Pexp_variant (l, Some var) }
+           in
+           type_expect_ ?in_function env sexp (mk_expected ty_expected)
+       | _ -> assert false (* CR jfuruse: TODO *)
+       end
+ 
+   (* 
+      [(Some) e] and [Some @@ e] should be translated to [Some e], 
+      not [(fun x -> Some x) e], but this optimization should be done in
+      bytecomp level, not here. And actually bytecomp does it!
+   *)
+
+(* ppx_curried_constr end *)
+
   | Pexp_apply(sfunct, sargs) ->
       assert (sargs <> []);
       begin_def (); (* one more level for non-returning functions *)
@@ -2565,8 +2615,18 @@
         exp_type = newty (Ttuple (List.map (fun e -> e.exp_type) expl));
         exp_attributes = sexp.pexp_attributes;
         exp_env = env }
+(* ppx_curried_constr begin *)
+
+  | Pexp_construct(lid, None) -> 
+      (* None  or   (Some) *)
+      (* type_construct env loc lid sarg ty_expected sexp.pexp_attributes *)
+      type_construct_maybe_uncurried ?in_function env loc ty_expected sexp lid
+
+(* ppx_curried_constr end *)
+
   | Pexp_construct(lid, sarg) ->
       type_construct env loc lid sarg ty_expected_explained sexp.pexp_attributes
+
   | Pexp_variant(l, sarg) ->
       (* Keep sharing *)
       let ty_expected0 = instance ty_expected in
@@ -4248,6 +4308,145 @@
   { texp with
     exp_desc = Texp_construct(lid, constr, args) }
 
+(* ppx_curried_constr begin *)
+
+and type_construct_curried ?in_function env loc ty_expected app_attrs sexp apploc xs =
+
+  let lid = match sexp.pexp_desc with
+    | Pexp_construct (lid, None) -> lid
+    | _ -> assert false (* impos *)
+  in
+
+  let opath =
+    try
+      let (p0, p,_) = extract_concrete_variant env ty_expected in
+      Some(p0, p, ty_expected.level = generic_level || not !Clflags.principal)
+    with Not_found -> None
+  in
+  let constrs = Env.lookup_all_constructors Env.Positive ~loc:lid.loc lid.txt env in
+  let constr =
+    wrap_disambiguate "This variant expression is expected to have" (mk_expected ty_expected)
+      (Constructor.disambiguate Env.Positive lid env opath) constrs in
+
+  match constr.cstr_arity with
+  | 0 ->
+      (* (None..) must be rejected *)
+      raise (Error(loc, env, Other "Nullary constructor cannot be curried."))
+  | 1 ->
+      (* (Some..) must be rejected *)
+      raise (Error(loc, env, Other "Unary constructor cannot be curried."))
+  | n ->
+      (* Format.eprintf "Debug: applied args: %d@." (List.length xs); *)
+      (* Unlike (Some) x, here we should optimize partial applications *)
+      (* (C..) a1          =>  (fun a2 a3 -> C (a1,a2,a3)) *)
+      (* (C..) a1 a2 a3    =>  C (a1,a2,a3) *)
+      (* (C..) a1 a2 a3 a4 =>  C (a1,a2,a3) a4 *)
+      let open Ast_helper in
+      let patterns, sarg, remain = 
+        let xi i = Exp.ident {txt=Longident.Lident ("x" ^ string_of_int i); loc=Location.none} in
+        let pi i = Pat.var {txt="x" ^ string_of_int i; loc=Location.none} in
+        let rec loop i xs =
+          if i > n then [], [], xs
+          else
+            match xs with
+            | [] ->
+                let patterns, args, remain = loop (i+1) [] in
+                assert (remain = []);
+                pi i :: patterns,
+                xi i :: args,
+                []
+            | (l,x)::xs ->
+                assert (l = Nolabel); (* CR jfuruse: TODO *)
+                let patterns, args, remain = loop (i+1) xs in
+                patterns,
+                x :: args,
+                remain
+        in
+        let patterns, args, remain = loop 1 xs in
+        patterns,
+        begin match args with
+        | [] -> assert false
+        | [sarg] -> sarg
+        | args -> Exp.tuple args 
+        end,
+        remain
+      in
+      match patterns, remain with
+      | [], [] -> (* C (a1,a2,a3) *)
+          (* Format.eprintf "Debug0: full@."; *)
+          type_construct env loc lid (Some sarg) (mk_expected ty_expected) app_attrs
+      | [], _ ->  (* C (a1,a2,a3) a4 a5 *)
+          (* clearly an error but we delegate to the original typer *)
+          let sexp = 
+            Exp.apply ~loc:apploc ~attrs:app_attrs
+              { sexp with pexp_desc = Pexp_construct (lid, Some sarg) }
+              remain
+          in
+          (* Format.eprintf "Debug1: %a@." Pprintast.expression sexp; *)
+          type_expect_ ?in_function env sexp (mk_expected ty_expected)
+      | _, [] -> (* fun a3 -> C (a1,a2,a3) *)
+          let sexp =
+            let rec funs = function
+              | [] -> 
+                  { sexp with pexp_desc = Pexp_construct (lid, Some sarg) }
+              | x::xs ->
+                  Exp.fun_ ~loc:apploc ~attrs:app_attrs
+                    Nolabel None x
+                    (funs xs)
+            in
+            funs patterns
+          in
+          (* Format.eprintf "Debug2: %a@." Pprintast.expression sexp; *)
+          type_expect_ ?in_function env sexp (mk_expected ty_expected)
+      | _, _ -> assert false
+
+and type_construct_maybe_uncurried ?in_function env loc ty_expected sexp lid =
+  (* None  or   (Some) *)
+  let opath =
+    try
+      let (p0, p,_) = extract_concrete_variant env ty_expected in
+      Some(p0, p, ty_expected.level = generic_level || not !Clflags.principal)
+    with Not_found -> None
+  in
+  let constrs = Env.lookup_all_constructors Env.Positive ~loc:lid.loc lid.txt env in
+  let constr =
+    wrap_disambiguate "This variant expression is expected to have" (mk_expected ty_expected)
+      (Constructor.disambiguate Env.Positive lid env opath) constrs in
+
+  match constr.cstr_arity with
+  | 0 -> (* None *)
+      type_construct env loc lid None (mk_expected ty_expected) sexp.pexp_attributes
+  | 1 -> (* (Some) => fun x -> Some x *)
+      let sexp = 
+        let open Ast_helper in
+        let p = Pat.var {txt= "x"; loc= Location.none } in
+        let x = Exp.ident {txt= Longident.Lident "x"; loc= Location.none } in
+        let e = { sexp with pexp_desc = Pexp_construct (lid, Some x) } in
+        Exp.fun_ Nolabel None p e
+      in
+      type_expect_ ?in_function env sexp (mk_expected ty_expected)
+
+  | n -> (* (F) => fun (x,y) -> F (x,y) *)
+      let sexp = 
+        let open Ast_helper in
+        let make_n n f =
+          let rec loop st = function
+            | 0 -> List.rev st
+            | n -> loop (f n :: st) (n-1)
+          in
+          loop [] n
+        in
+        let names = make_n n (fun i -> "x" ^ string_of_int i) in
+        let p = Pat.(tuple (List.map (fun txt -> var {txt; loc= Location.none}) names)) in
+        let x = Exp.(tuple (List.map (fun txt -> ident {txt= Longident.Lident txt; loc= Location.none }) names)) in
+        let e = { sexp with pexp_desc = Pexp_construct (lid, Some x) } in
+        Exp.fun_ Nolabel None p e
+      in
+      type_expect_ ?in_function env sexp (mk_expected ty_expected)
+
+
+(* ppx_curried_constr end *)
+
 (* Typing of statements (expressions whose values are discarded) *)
 
 and type_statement ?explanation env sexp =
@@ -5234,6 +5433,12 @@
         (function ppf ->
           fprintf ppf "but bindings were expected of type")
   | Empty_pattern -> assert false
+(* ppx_curried_constr begin *)
+
+  | Other s ->
+    Location.errorf ~loc "@[%s@]" s
+
+(* ppx_curried_constr end *)
 
 let report_error ~loc env err =
   wrap_printing_env ~error:true env (fun () -> report_error ~loc env err)
--- /home/chet/Hack/Ocaml/GENERIC/4.10.0/.opam-switch/sources/ocaml-base-compiler.4.10.0/typing/typecore.mli	2020-02-21 05:50:54.000000000 -0800
+++ my_typecore.mli	2020-10-14 20:29:13.943278132 -0700
@@ -177,6 +177,7 @@
   | Letop_type_clash of string * Ctype.Unification_trace.t
   | Andop_type_clash of string * Ctype.Unification_trace.t
   | Bindings_type_clash of Ctype.Unification_trace.t
+  | Other of string
 
 exception Error of Location.t * Env.t * error
 exception Error_forward of Location.error
--- /home/chet/Hack/Ocaml/GENERIC/4.10.0/.opam-switch/sources/ocaml-base-compiler.4.10.0/typing/typemod.ml	2020-02-21 05:50:54.000000000 -0800
+++ my_typemod.ml	2020-10-14 20:29:27.243328983 -0700
@@ -12,6 +12,9 @@
 (*   special exception on linking described in the file LICENSE.          *)
 (*                                                                        *)
 (**************************************************************************)
+[@@@warning "-27-32-41"]
+module Typecore = My_typecore
+module Typeclass = My_typeclass
 
 open Misc
 open Longident
