*** /home/jun/.opam/4.02.3/build/ocaml/tools/untypeast.ml	Wed Mar 18 00:38:47 2015
--- untypeast.ml	Wed Feb 24 21:51:28 2016
***************
*** 1,3 ****
--- 1,6 ----
+ (*
+   This is a slightly modified version of tools/untypeast.ml of OCaml.
+ *)
  (**************************************************************************)
  (*                                                                        *)
  (*                                OCaml                                   *)
***************
*** 26,32 ****
     * For Pexp_apply, it is unclear whether arguments are reordered, especially
      when there are optional arguments.
  
!   * TODO: check Ttype_variant -> Ptype_variant (stub None)
  
  *)
  
--- 29,35 ----
     * For Pexp_apply, it is unclear whether arguments are reordered, especially
      when there are optional arguments.
  
!    * TODO: check Ttype_variant -> Ptype_variant (stub None)
  
  *)
  
***************
*** 181,186 ****
--- 184,200 ----
        { pat_extra=[Tpat_unpack, _, _attrs]; pat_desc = Tpat_var (_,name); _ } ->
          Ppat_unpack name
      | { pat_extra=[Tpat_type (_path, lid), _, _attrs]; _ } -> Ppat_type lid
+     | { pat_extra = [(Tpat_constraint cty, _loc, _attrs)];
+         pat_desc = Tpat_alias ({pat_desc = Tpat_any}, _id, s) } ->
+         (* let (x : t) = ... where x is unused ...
+            => let ((_ as x) : t) = ... where x is unused ...
+ 
+            Since ocamlc gives different warnings for the former and the latter at stdlib/parsing.ml,
+            we need to recover the original.
+         *)
+         (* let (_ : as s) : cty = ..    =>    let s : cty = .. *)
+         Ppat_constraint (Pat.mk ~loc:pat.pat_loc ~attrs:pat.pat_attributes (Ppat_var s),
+                          untype_core_type cty)
      | { pat_extra= (Tpat_constraint ct, _, _attrs) :: rem; _ } ->
          Ppat_constraint (untype_pattern { pat with pat_extra=rem },
                           untype_core_type ct)
***************
*** 487,493 ****
          (* TODO , untype_package_type pack) *)
  
    in
!   Mod.mk ~loc:mexpr.mod_loc desc
  
  and untype_class_expr cexpr =
    let desc = match cexpr.cl_desc with
--- 501,507 ----
          (* TODO , untype_package_type pack) *)
  
    in
!   Ast_helper.Mod.mk ~loc:mexpr.mod_loc desc
  
  and untype_class_expr cexpr =
    let desc = match cexpr.cl_desc with
***************
*** 560,565 ****
--- 574,580 ----
      pctf_attributes = ctf.ctf_attributes;
    }
  
+ (* CR jfuruse: I believe this drops attributes... *)
  and untype_core_type ct =
    let desc = match ct.ctyp_desc with
        Ttyp_any -> Ptyp_any
***************
*** 579,584 ****
--- 594,604 ----
          Ptyp_alias (untype_core_type ct, s)
      | Ttyp_variant (list, bool, labels) ->
          Ptyp_variant (List.map untype_row_field list, bool, labels)
+     | Ttyp_poly ([], ct) ->
+         (* This case is required since record field types w/o quantifications are wrapped by [Ttyp_poly ([], ct)] in typedecl.ml,
+            and to retrieve the identical Parsetree we need to get rid of it.
+          *)
+         (untype_core_type ct).ptyp_desc
      | Ttyp_poly (list, ct) -> Ptyp_poly (list, untype_core_type ct)
      | Ttyp_package pack -> Ptyp_package (untype_package_type pack)
    in
***************
*** 624,630 ****
          in
          let exp = remove_fun_self exp in
          Pcf_method (lab, priv, Cfk_concrete (o, untype_expression exp))
!     | Tcf_initializer exp ->
          let remove_fun_self = function
            | { exp_desc = Texp_function("", [case], _) } when is_self_pat case.c_lhs && case.c_guard = None -> case.c_rhs
            | e -> e
--- 644,650 ----
          in
          let exp = remove_fun_self exp in
          Pcf_method (lab, priv, Cfk_concrete (o, untype_expression exp))
!     | Tcf_initializer exp -> 
          let remove_fun_self = function
            | { exp_desc = Texp_function("", [case], _) } when is_self_pat case.c_lhs && case.c_guard = None -> case.c_rhs
            | e -> e
