*** typecore.ml	2017-06-23 22:09:56.000000000 +0900
--- my_typecore.ml	2017-08-24 11:44:53.829121040 +0900
***************
*** 13,18 ****
--- 13,20 ----
  (*                                                                        *)
  (**************************************************************************)
  
+ [@@@warning "-27-32"]
+ 
  (* Typechecking for the core language *)
  
  open Misc
***************
*** 77,82 ****
--- 79,85 ----
    | Not_an_extension_constructor
    | Literal_overflow of string
    | Unknown_literal of string * char
+   | Other of string
  
  exception Error of Location.t * Env.t * error
  exception Error_forward of Location.error
***************
*** 1162,1171 ****
        let (ty_args, ty_res) =
          instance_constructor ~in_pattern:(env, get_newtype_level ()) constr
        in
!       (* PR#7214: do not use gadt unification for toplevel lets *)
!       if not constr.cstr_generalized || mode = Inside_or || no_existentials
!       then unify_pat_types loc !env ty_res expected_ty
!       else unify_pat_types_gadt loc env ty_res expected_ty;
  
        let rec check_non_escaping p =
          match p.ppat_desc with
--- 1165,1174 ----
        let (ty_args, ty_res) =
          instance_constructor ~in_pattern:(env, get_newtype_level ()) constr
        in
!       if constr.cstr_generalized && mode <> Inside_or then
!         unify_pat_types_gadt loc env ty_res expected_ty
!       else
!         unify_pat_types loc !env ty_res expected_ty;
  
        let rec check_non_escaping p =
          match p.ppat_desc with
***************
*** 2104,2109 ****
--- 2107,2159 ----
    | Pexp_function caselist ->
        type_function ?in_function
          loc sexp.pexp_attributes env ty_expected Nolabel caselist
+ 
+ (* ppx_curried_constr begin *)
+         
+    (* ((!F) 1) 2 3  == !F 1 2 3
+       
+       We here to try contract applications as possible...
+    *)
+    | Pexp_apply ( { pexp_desc = Pexp_apply(x,xs);
+                     pexp_attributes = [] }, ys ) ->
+  
+        type_expect_ ?in_function env 
+          { sexp with pexp_desc = Pexp_apply (x, xs @ ys) }
+          ty_expected
+  
+    | Pexp_apply({ pexp_desc = Pexp_ident {txt=Longident.Lident "!"; loc=loc'} }, 
+                 (Nolabel, ({ pexp_desc = Pexp_construct (lid, None) } as con)) :: xs) ->
+        (* ! C a b *)
+        type_construct_curried ?in_function env loc ty_expected 
+          sexp.pexp_attributes
+          con loc' xs
+  
+    | Pexp_apply({ pexp_desc = Pexp_ident {txt=Longident.Lident "!"; loc=loc'} }, 
+                 (Nolabel, ({ pexp_desc = Pexp_variant (l, None) } as e)) :: xs) ->
+        (* ! `F a b *)
+        let open Ast_helper in
+        begin match xs with
+        | (Nolabel,x)::xs -> (* (`A..) a b => (`A a) b *)
+            let sexp = Exp.apply ~loc { e with pexp_desc = Pexp_variant (l, Some x) } xs in
+            type_expect_ ?in_function env sexp ty_expected
+        | [] -> (* (`A..) => fun x -> `A x *)
+            let pat = Pat.var ~loc:loc' {txt="x"; loc=loc'} in
+            let var = Exp.ident ~loc:loc' {txt=Longident.Lident "x"; loc=loc'} in
+            let sexp = Ast_helper.Exp.fun_ ~loc Nolabel None pat 
+              { e with pexp_desc = Pexp_variant (l, Some var) }
+            in
+            type_expect_ ?in_function env sexp ty_expected
+        | _ -> assert false (* CR jfuruse: TODO *)
+        end
+  
+    (* 
+       [(Some) e] and [Some @@ e] should be translated to [Some e], 
+       not [(fun x -> Some x) e], but this optimization should be done in
+       bytecomp level, not here. And actually bytecomp does it!
+    *)
+ 
+ (* ppx_curried_constr end *)
+ 
    | Pexp_apply(sfunct, sargs) ->
        assert (sargs <> []);
        begin_def (); (* one more level for non-returning functions *)
***************
*** 2189,2196 ****
--- 2239,2256 ----
          exp_type = newty (Ttuple (List.map (fun e -> e.exp_type) expl));
          exp_attributes = sexp.pexp_attributes;
          exp_env = env }
+ (* ppx_curried_constr begin *)
+ 
+   | Pexp_construct(lid, None) -> 
+       (* None  or   (Some) *)
+       (* type_construct env loc lid sarg ty_expected sexp.pexp_attributes *)
+       type_construct_maybe_uncurried ?in_function env loc ty_expected sexp lid
+ 
+ (* ppx_curried_constr end *)
+ 
    | Pexp_construct(lid, sarg) ->
        type_construct env loc lid sarg ty_expected sexp.pexp_attributes
+ 
    | Pexp_variant(l, sarg) ->
        (* Keep sharing *)
        let ty_expected0 = instance env ty_expected in
***************
*** 3737,3742 ****
--- 3797,3943 ----
    { texp with
      exp_desc = Texp_construct(lid, constr, args) }
  
+ (* ppx_curried_constr begin *)
+ 
+ and type_construct_curried ?in_function env loc ty_expected app_attrs sexp apploc xs =
+ 
+   let lid = match sexp.pexp_desc with
+     | Pexp_construct (lid, None) -> lid
+     | _ -> assert false (* impos *)
+   in
+ 
+   let opath =
+     try
+       let (p0, p,_) = extract_concrete_variant env ty_expected in
+       Some(p0, p, ty_expected.level = generic_level || not !Clflags.principal)
+     with Not_found -> None
+   in
+   let constrs = Typetexp.find_all_constructors env lid.loc lid.txt in
+   let constr =
+     wrap_disambiguate "This variant expression is expected to have" ty_expected
+       (Constructor.disambiguate lid env opath) constrs in
+   Env.mark_constructor Env.Positive env (Longident.last lid.txt) constr;
+ 
+   match constr.cstr_arity with
+   | 0 ->
+       (* (None..) must be rejected *)
+       raise (Error(loc, env, Other "Nullary constructor cannot be curried."))
+   | 1 ->
+       (* (Some..) must be rejected *)
+       raise (Error(loc, env, Other "Unary constructor cannot be curried."))
+   | n ->
+       (* Format.eprintf "Debug: applied args: %d@." (List.length xs); *)
+       (* Unlike (Some) x, here we should optimize partial applications *)
+       (* (C..) a1          =>  (fun a2 a3 -> C (a1,a2,a3)) *)
+       (* (C..) a1 a2 a3    =>  C (a1,a2,a3) *)
+       (* (C..) a1 a2 a3 a4 =>  C (a1,a2,a3) a4 *)
+       let open Ast_helper in
+       let patterns, sarg, remain = 
+         let xi i = Exp.ident {txt=Longident.Lident ("x" ^ string_of_int i); loc=Location.none} in
+         let pi i = Pat.var {txt="x" ^ string_of_int i; loc=Location.none} in
+         let rec loop i xs =
+           if i > n then [], [], xs
+           else
+             match xs with
+             | [] ->
+                 let patterns, args, remain = loop (i+1) [] in
+                 assert (remain = []);
+                 pi i :: patterns,
+                 xi i :: args,
+                 []
+             | (l,x)::xs ->
+                 assert (l = Nolabel); (* CR jfuruse: TODO *)
+                 let patterns, args, remain = loop (i+1) xs in
+                 patterns,
+                 x :: args,
+                 remain
+         in
+         let patterns, args, remain = loop 1 xs in
+         patterns,
+         begin match args with
+         | [] -> assert false
+         | [sarg] -> sarg
+         | args -> Exp.tuple args 
+         end,
+         remain
+       in
+       match patterns, remain with
+       | [], [] -> (* C (a1,a2,a3) *)
+           (* Format.eprintf "Debug0: full@."; *)
+           type_construct env loc lid (Some sarg) ty_expected app_attrs
+       | [], _ ->  (* C (a1,a2,a3) a4 a5 *)
+           (* clearly an error but we delegate to the original typer *)
+           let sexp = 
+             Exp.apply ~loc:apploc ~attrs:app_attrs
+               { sexp with pexp_desc = Pexp_construct (lid, Some sarg) }
+               remain
+           in
+           (* Format.eprintf "Debug1: %a@." Pprintast.expression sexp; *)
+           type_expect_ ?in_function env sexp ty_expected
+       | _, [] -> (* fun a3 -> C (a1,a2,a3) *)
+           let sexp =
+             let rec funs = function
+               | [] -> 
+                   { sexp with pexp_desc = Pexp_construct (lid, Some sarg) }
+               | x::xs ->
+                   Exp.fun_ ~loc:apploc ~attrs:app_attrs
+                     Nolabel None x
+                     (funs xs)
+             in
+             funs patterns
+           in
+           (* Format.eprintf "Debug2: %a@." Pprintast.expression sexp; *)
+           type_expect_ ?in_function env sexp ty_expected
+       | _, _ -> assert false
+ 
+ and type_construct_maybe_uncurried ?in_function env loc ty_expected sexp lid =
+   (* None  or   (Some) *)
+   let opath =
+     try
+       let (p0, p,_) = extract_concrete_variant env ty_expected in
+       Some(p0, p, ty_expected.level = generic_level || not !Clflags.principal)
+     with Not_found -> None
+   in
+   let constrs = Typetexp.find_all_constructors env lid.loc lid.txt in
+   let constr =
+     wrap_disambiguate "This variant expression is expected to have" ty_expected
+       (Constructor.disambiguate lid env opath) constrs in
+   Env.mark_constructor Env.Positive env (Longident.last lid.txt) constr;
+ 
+   match constr.cstr_arity with
+   | 0 -> (* None *)
+       type_construct env loc lid None ty_expected sexp.pexp_attributes
+   | 1 -> (* (Some) => fun x -> Some x *)
+       let sexp = 
+         let open Ast_helper in
+         let p = Pat.var {txt= "x"; loc= Location.none } in
+         let x = Exp.ident {txt= Longident.Lident "x"; loc= Location.none } in
+         let e = { sexp with pexp_desc = Pexp_construct (lid, Some x) } in
+         Exp.fun_ Nolabel None p e
+       in
+       type_expect_ ?in_function env sexp ty_expected
+ 
+   | n -> (* (F) => fun (x,y) -> F (x,y) *)
+       let sexp = 
+         let open Ast_helper in
+         let make_n n f =
+           let rec loop st = function
+             | 0 -> List.rev st
+             | n -> loop (f n :: st) (n-1)
+           in
+           loop [] n
+         in
+         let names = make_n n (fun i -> "x" ^ string_of_int i) in
+         let p = Pat.(tuple (List.map (fun txt -> var {txt; loc= Location.none}) names)) in
+         let x = Exp.(tuple (List.map (fun txt -> ident {txt= Longident.Lident txt; loc= Location.none }) names)) in
+         let e = { sexp with pexp_desc = Pexp_construct (lid, Some x) } in
+         Exp.fun_ Nolabel None p e
+       in
+       type_expect_ ?in_function env sexp ty_expected
+ 
+ 
+ (* ppx_curried_constr end *)
+ 
  (* Typing of statements (expressions whose values are discarded) *)
  
  and type_statement env sexp =
***************
*** 4425,4430 ****
--- 4626,4639 ----
    | Unknown_literal (n, m) ->
        fprintf ppf "Unknown modifier '%c' for literal %s%c" m n m
  
+ (* ppx_curried_constr begin *)
+ 
+   | Other s ->
+       fprintf ppf
+         "@[%s@]" s
+ 
+ (* ppx_curried_constr end *)
+ 
  
  let report_error env ppf err =
    wrap_printing_env env (fun () -> report_error env ppf err)
